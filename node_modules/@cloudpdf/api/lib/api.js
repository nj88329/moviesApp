"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const jwt = __importStar(require("jsonwebtoken"));
const fs = __importStar(require("fs"));
class Api {
    options;
    baseUrl;
    isSigned;
    constructor(options, url) {
        this.options = options;
        this.baseUrl = url;
        this.isSigned = (options.cloudName && options.signingSecret) ? true : false;
    }
    setSigned(enabled) {
        if (enabled && (!this.options.cloudName || !this.options.signingSecret)) {
            throw new Error('cloudName and signingSecret should be set');
        }
        this.isSigned = enabled;
    }
    getSignedParams(functionName, params = {}, expiresIn = '15s') {
        if (!this.options.cloudName || !this.options.signingSecret) {
            throw new Error('cloudName and signingSecret should be set');
        }
        return jwt.sign({
            function: functionName,
            params
        }, this.options.signingSecret, {
            expiresIn,
            header: {
                alg: 'HS256',
                typ: 'JWt',
                kid: this.options.cloudName
            }
        });
    }
    getHeaders(functionName, params = {}) {
        let token;
        if (this.isSigned) {
            token = this.getSignedParams(functionName, params);
        }
        else {
            token = this.options.apiKey;
        }
        return {
            'Content-Type': 'application/json',
            'X-Authorization': token
        };
    }
    async get(functionName, url, params = {}) {
        return axios_1.default.get(`${this.baseUrl}${url}`, {
            headers: this.getHeaders(functionName, params)
        }).then(response => {
            return response.data;
        }).catch(error => {
            throw new Error("HTTP error " + error.response.data.code);
        });
    }
    async delete(functionName, url, params = {}) {
        return axios_1.default.delete(`${this.baseUrl}${url}`, {
            headers: this.getHeaders(functionName, params)
        }).then(response => {
            return response.data;
        }).catch(error => {
            throw new Error("HTTP error " + error.response.data.code);
        });
    }
    async put(functionName, url, params = {}) {
        return axios_1.default.put(`${this.baseUrl}${url}`, params, {
            headers: this.getHeaders(functionName, params)
        }).then(response => {
            return response.data;
        }).catch(error => {
            throw new Error("HTTP error " + error.response.data.code);
        });
    }
    async patch(functionName, url, params = {}) {
        return axios_1.default.patch(`${this.baseUrl}${url}`, params, {
            headers: this.getHeaders(functionName, params)
        }).then(response => {
            return response.data;
        }).catch(error => {
            throw new Error("HTTP error " + error.response.data.code);
        });
    }
    async post(functionName, url, params = {}) {
        return axios_1.default.post(`${this.baseUrl}${url}`, params, {
            headers: this.getHeaders(functionName, params)
        }).then(response => {
            return response.data;
        }).catch(error => {
            throw new Error("HTTP error " + error.response.data.code);
        });
    }
    async uploadBufferOrPath(preSignedURL, bufferOrString) {
        let buffer;
        if (typeof bufferOrString === 'string') {
            buffer = fs.readFileSync(bufferOrString);
        }
        else {
            buffer = bufferOrString;
        }
        return axios_1.default.put(preSignedURL, buffer, {
            headers: {
                'Content-Type': 'application/pdf'
            }
        }).then(response => {
            return response;
        }).catch(_error => {
            throw new Error("Upload error");
        });
    }
}
exports.default = Api;
