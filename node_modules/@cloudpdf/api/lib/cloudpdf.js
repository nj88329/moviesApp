"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudPDF = void 0;
const api_1 = __importDefault(require("./api"));
const API_ENDPOINT = "https://api.cloudpdf.io/v2";
class CloudPDF {
    api;
    constructor(options) {
        this.api = new api_1.default(options, API_ENDPOINT);
    }
    setSigned(enabled) {
        this.api.setSigned(enabled);
    }
    async auth() {
        return this.api.get('APIV2GetAuth', '/auth');
    }
    async account() {
        return this.api.get('APIV2GetAccount', '/account');
    }
    /* Documents */
    async createDocument(params) {
        return this.api.post('APIV2CreateDocument', '/documents', params);
    }
    async getDocument(id) {
        return this.api.get('APIV2GetDocument', `/documents/${id}`, {
            id
        });
    }
    async updateDocument(id, params) {
        return this.api.put('APIV2UpdateDocument', `/documents/${id}`, {
            id,
            ...params
        });
    }
    async deleteDocument(id) {
        return this.api.delete('APIV2DeleteDocument', `/documents/${id}`, {
            id
        });
    }
    async createNewFileVersion(documentId, params) {
        return this.api.post('APIV2CreateDocumentFile', `/documents/${documentId}/files`, {
            id: documentId,
            ...params
        });
    }
    async uploadDocumentFileComplete(id, fileId) {
        return this.api.patch('APIV2PatchDocumentFile', `/documents/${id}/files/${fileId}`, {
            id,
            fileId,
            uploadCompleted: true
        });
    }
    async getDocumentFile(documentId, fileId) {
        return this.api.get('APIV2GetDocumentFile', `/documents/${documentId}/files/${fileId}`, {
            id: documentId,
            fileId
        });
    }
    async uploadDocument(bufferOrPath, params) {
        const document = await this.createDocument(params);
        if (!document.file.uploadUrl)
            throw new Error('Something went wrong');
        await this.api.uploadBufferOrPath(document.file.uploadUrl, bufferOrPath);
        const file = await this.uploadDocumentFileComplete(document.id, document.file.id);
        return {
            ...document,
            file
        };
    }
    async uploadNewFileVersion(id, bufferOrPath, params) {
        const file = await this.createNewFileVersion(id, params);
        if (!file.uploadUrl)
            throw new Error('Something went wrong');
        await this.api.uploadBufferOrPath(file.uploadUrl, bufferOrPath);
        const uploadedFile = await this.uploadDocumentFileComplete(file.documentId, file.id);
        return uploadedFile;
    }
    /* Document TOKEN generation */
    getViewerToken(params, expiresIn = '1h') {
        return this.api.getSignedParams('APIGetDocument', params, expiresIn);
    }
    /* Webhook */
    async createWebhook(params) {
        return this.api.post('APIV2CreateWebhook', '/webhooks', params);
    }
    async getWebhook(id) {
        return this.api.get('APIV2GetWebhook', `/webhooks/${id}`, {
            id
        });
    }
    async updateWebhook(id, params) {
        return this.api.put('APIV2UpdateWebhook', `/webhooks/${id}`, {
            id,
            ...params
        });
    }
    async deleteWebhook(id) {
        return this.api.delete('APIV2DeleteWebhook', `/webhooks/${id}`, {
            id
        });
    }
    async getWebhooks() {
        return this.api.get('APIV2GetWebhooks', `/webhooks`, {});
    }
}
exports.CloudPDF = CloudPDF;
