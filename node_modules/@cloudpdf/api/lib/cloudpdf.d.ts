/// <reference types="node" />
export declare type TWatermarkType = 'diagonal' | 'headerLeft' | 'headerCenter' | 'headerRight' | 'footerLeft' | 'footerCenter' | 'footerRight';
export interface IWatermarkParams {
    fontSize: number;
    fontFamily: string;
    color: string;
    opacity: number;
    text: string;
    type: TWatermarkType;
}
interface IDefaultPermissionsParams {
    download?: "NotAllowed" | "Allowed" | "EmailRequired";
    search?: boolean;
    selection?: boolean;
    info?: ("email" | "name" | "organization" | "phone")[];
    watermarks?: IWatermarkParams[];
}
interface IGetViewerTokenParams extends IDefaultPermissionsParams {
    id: string;
}
interface ICreateDocumentParams {
    name: string;
    description?: string;
    parentId?: string;
    tags?: string[];
    defaultPermissions?: IDefaultPermissionsParams;
}
interface ICreateWebhookParams {
    name: string;
    url: string;
    secret?: string;
    events?: string[];
    headers?: {
        [key: string]: string;
    };
}
interface ICreateDocumentFileNewVersionParams {
    name: string;
}
export interface IDeleteResonse {
    deletionTime: number;
}
export interface IAuthResponse {
    organizationName: string;
    message: string;
}
export interface IAccountResponse {
    organizationName: string;
    plan: string;
    allowedMonthlyUploads: number;
    usedMonthlyUploads: number;
    allowedMonthlyViews: number;
    usedMonthlyViews: number;
    allowedStorage: number;
    usedStorage: any;
}
export interface IFileResponse {
    id: string;
    status: "WaitingUpload" | "Processing" | "Failed" | "Completed";
    uploadUrl: string | null;
    thumbnail: string | null;
    size: number | null;
    documentId: string;
}
export interface IPermissionResponse {
    download: "NotAllowed" | "Allowed" | "EmailRequired";
    search: boolean;
    selection: boolean;
    info: ("email" | "name" | "organization" | "phone")[];
}
export interface IDocumentResponse {
    id: string;
    name: string;
    description: string | null;
    file: IFileResponse;
    defaultPermissions: IPermissionResponse;
}
interface IWebhookEventsResponse {
    name: string;
    slug: string;
}
export interface IWebhookResponse {
    name: string;
    url: string;
    secret: string;
    events: IWebhookEventsResponse[];
    enabled: string;
    headers: {
        [key: string]: string;
    };
}
export interface ICloudPDFOptions {
    cloudName?: string;
    apiKey: string;
    signingSecret?: string;
}
export declare class CloudPDF {
    private api;
    constructor(options: ICloudPDFOptions);
    setSigned(enabled: boolean): void;
    auth(): Promise<IAuthResponse>;
    account(): Promise<IAccountResponse>;
    createDocument(params: ICreateDocumentParams): Promise<IDocumentResponse>;
    getDocument(id: string): Promise<IDocumentResponse>;
    updateDocument(id: string, params: ICreateDocumentParams): Promise<IDocumentResponse>;
    deleteDocument(id: string): Promise<IDeleteResonse>;
    createNewFileVersion(documentId: string, params: ICreateDocumentFileNewVersionParams): Promise<IFileResponse>;
    uploadDocumentFileComplete(id: string, fileId: string): Promise<IFileResponse>;
    getDocumentFile(documentId: string, fileId: string): Promise<IFileResponse>;
    uploadDocument(bufferOrPath: string | Buffer, params: ICreateDocumentParams): Promise<IDocumentResponse>;
    uploadNewFileVersion(id: string, bufferOrPath: string | Buffer, params: ICreateDocumentFileNewVersionParams): Promise<IFileResponse>;
    getViewerToken(params: IGetViewerTokenParams, expiresIn?: string | number): string;
    createWebhook(params: ICreateWebhookParams): Promise<IWebhookResponse>;
    getWebhook(id: string): Promise<IWebhookResponse>;
    updateWebhook(id: string, params: ICreateWebhookParams): Promise<IWebhookResponse>;
    deleteWebhook(id: string): Promise<IWebhookResponse>;
    getWebhooks(): Promise<IWebhookResponse[]>;
}
export {};
